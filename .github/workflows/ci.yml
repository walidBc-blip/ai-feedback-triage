name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cd backend
        export LLM_API_KEY="test-key"
        export LLM_MODEL="o4-mini-2025-04-16"
        export DATABASE_URL="sqlite+aiosqlite:///./test.db"

    - name: Run backend tests
      run: |
        cd backend
        export LLM_API_KEY="test-key"
        export LLM_MODEL="o4-mini-2025-04-16"
        export DATABASE_URL="sqlite+aiosqlite:///./test.db"
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python -m pytest tests/ -v --tb=short
      env:
        LLM_API_KEY: test-key
        LLM_MODEL: o4-mini-2025-04-16
        DATABASE_URL: sqlite+aiosqlite:///./test.db

    - name: Run backend tests with coverage
      run: |
        cd backend
        pip install pytest-cov
        export LLM_API_KEY="test-key"
        export LLM_MODEL="o4-mini-2025-04-16"
        export DATABASE_URL="sqlite+aiosqlite:///./test.db"
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html
      env:
        LLM_API_KEY: test-key
        LLM_MODEL: o4-mini-2025-04-16
        DATABASE_URL: sqlite+aiosqlite:///./test.db

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
      continue-on-error: true

    - name: Run TypeScript check
      run: |
        cd frontend
        npm run type-check
      continue-on-error: true

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Run frontend tests (if available)
      run: |
        cd frontend
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No frontend tests configured, skipping..."
        fi
      continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t ai-feedback-triage-backend .

    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t ai-feedback-triage-frontend .

    - name: Test Docker Compose
      run: |
        # Create test env file
        echo "LLM_API_KEY=test-key" > .env
        echo "LLM_MODEL=o4-mini-2025-04-16" >> .env
        echo "API_URL=http://localhost:8000" >> .env
        
        # Test docker-compose build
        docker-compose build
        
        # Start services in background
        docker-compose up -d
        
        # Wait for services to start
        sleep 30
        
        # Check if services are running
        docker-compose ps
        
        # Test backend health endpoint
        curl --fail --retry 5 --retry-delay 5 http://localhost:8000/health || true
        
        # Cleanup
        docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python linting tools
      run: |
        pip install black flake8 isort

    - name: Check Python code formatting
      run: |
        cd backend
        black --check src/ tests/ || true
        flake8 src/ tests/ --max-line-length=100 || true
        isort --check-only src/ tests/ || true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Check frontend code formatting
      run: |
        cd frontend
        npm run lint || true
        if command -v prettier &> /dev/null; then
          npx prettier --check src/ || true
        fi